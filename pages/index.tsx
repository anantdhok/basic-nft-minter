import { useEffect, useState } from "react";

import Head from "next/head";

import Alerts from "@/components/alerts";
import Spinner from "@/components/loading";
import { connectWallet, getConnectedWallet, mintNFT } from "@/utils/interact";

export default function Home() {
  // States and handlers
  const [data, setData] = useState<any>({ name: "", description: "", image: "" });
  const [walletAddress, setWallet] = useState<string>("");
  const [status, setStatus] = useState<any>(null);
  const [isLoading, setLoading] = useState<boolean>(false);

  useEffect(() => {
    const initialize = async () => {
      const { address, message } = await getConnectedWallet();
      setStatus({ type: address.length ? "success" : "error", message });
      setWallet(address);
    };

    const addWalletListener = () => {
      const connectAlert: any = { type: "error", message: "Connect to wallet using the top right button. 👆" };
      const installAlert: any = { type: "error", message: "You must install a Ethereum wallet in your browser. 📥" };
      if (window.ethereum) {
        window.ethereum.on("accountsChanged", (accounts: string[]) => {
          setStatus(accounts.length > 0 ? null : connectAlert);
          setWallet(accounts.length > 0 ? accounts[0] : "");
        });
        window.ethereum.on("disconnect", () => {
          setStatus(connectAlert);
          setWallet("");
        });
      } else setStatus(installAlert);
    };

    initialize();
    addWalletListener();
  }, []);

  const handleExplorerRedirect = () => {
    window.open(`https://mumbai.polygonscan.com/address/${walletAddress}`, "_blank");
  };

  const handleConnectWallet = async () => {
    const { address, message } = await connectWallet();
    setStatus({ type: address.length ? "success" : "error", message });
    setWallet(address);
  };

  const handleMint = async () => {
    setLoading(true);
    const { status, message } = await mintNFT(data.name, data.description, data.image);
    if (status) setData({ name: "", description: "", image: "" });
    setStatus({ type: status ? "success" : "error", message });
    setLoading(false);
  };

  const addHyperlink = (text: string) => {
    if (!text.includes("https")) return text;

    // Get substring between start and end index
    const urlStartsAt = text.indexOf("https");
    let url = text.substring(urlStartsAt);
    const urlEndsAt = urlStartsAt + url.split(" ")[0].length;
    url = text.substring(urlStartsAt, urlEndsAt);

    // Get substring for hash from url
    const hash = url.substring(url.indexOf("0x"));

    return (
      <>
        {String(text).substring(0, urlStartsAt)}
        <a href={url} target="_blank">
          {String(hash).substring(0, 8) + "..." + String(hash).substring(60)}
        </a>
        {String(text).substring(urlEndsAt)}
      </>
    );
  };

  return (
    <>
      <Head>
        <title>Mint App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex h-[100vh] w-full px-4 md:px-8 lg:px-24">
        <div className="m-auto flex flex-col">
          <div className="flex items-center justify-between">
            <h1 className="px-0 text-3xl font-semibold leading-[52px] sm:p-0 sm:pr-2 sm:leading-[66px]">
              ✨ NFT Minter
            </h1>

            <div
              className="tooltip py-1.5"
              data-tip={walletAddress.length ? "Check account info on explorer ↗️" : null}
            >
              <button
                className={`btn-sm btn rounded-full ${walletAddress.length && "btn-success"}`}
                onClick={walletAddress.length ? handleExplorerRedirect : handleConnectWallet}
              >
                {walletAddress.length
                  ? "Connected: " + String(walletAddress).substring(0, 6) + "..." + String(walletAddress).substring(38)
                  : "Connect Wallet"}
              </button>
            </div>
          </div>

          <p className="text-base">Simply add your asset&apos;s link, name, and description, then press Mint.</p>
          <form className="my-4">
            <h2 className="mt-4 mb-2">🔗 Link to asset</h2>
            <input
              type="text"
              className="input w-full"
              placeholder="e.g. https://gateway.pinata.cloud/ipfs/<hash>"
              onChange={e => setData({ ...data, image: e.target.value })}
              value={data.image}
            />

            <h2 className="mt-4 mb-2">📛 Describe its name</h2>
            <input
              type="text"
              className="input w-full"
              placeholder="e.g. My first NFT!"
              onChange={e => setData({ ...data, name: e.target.value })}
              value={data.name}
            />

            <h2 className="mt-4 mb-2">📝 Write some description</h2>
            <input
              type="text"
              className="input w-full"
              placeholder="e.g. Even cooler than cryptokitties ;)"
              onChange={e => setData({ ...data, description: e.target.value })}
              value={data.description}
            />
          </form>

          <button
            className={`btn-primary btn my-4 w-full ${(!walletAddress.length || isLoading) && "btn-disabled"}`}
            onClick={handleMint}
          >
            {!isLoading ? "Mint NFT 🌿" : <Spinner />}
          </button>

          {status?.message && <Alerts type={status.type} message={addHyperlink(status.message as string)} />}
        </div>
      </main>
    </>
  );
}
